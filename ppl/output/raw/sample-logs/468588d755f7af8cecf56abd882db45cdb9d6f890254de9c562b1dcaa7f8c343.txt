Here are 5 samples of simple search requests, PPL queries, Python code, and full descriptions based on the given index mapping:

1. <request>clientip=10.0.0.1</request>
<ppl>source=opensearch_dashboards_sample_data_logs | where clientip = '10.0.0.1'</ppl>
<python>[doc for doc in documents if str(doc.get('clientip')) == '10.0.0.1']</python>
<full_desc>Show me all logs with client IP address 10.0.0.1</full_desc>

2. <request>bytes>5000 AND machine.ram<8000000000</request>
<ppl>source=opensearch_dashboards_sample_data_logs | where bytes > 5000 AND machine.ram < 8000000000</ppl>
<python>[doc for doc in documents if doc.get('bytes') is not None and int(doc.get('bytes')) > 5000 and doc.get('machine', {}).get('ram') is not None and int(doc['machine']['ram']) < 8000000000]</python>
<full_desc>Show me all logs with bytes transferred greater than 5000 and machine RAM less than 8GB</full_desc>

3. <request>geo.dest:US AND phpmemory<1000000</request>
<ppl>source=opensearch_dashboards_sample_data_logs | where geo.dest = 'US' AND phpmemory < 1000000</ppl>
<python>[doc for doc in documents if str(doc.get('geo', {}).get('dest')) == 'US' and doc.get('phpmemory') is not None and int(doc.get('phpmemory')) < 1000000]</python>
<full_desc>Show me all logs with destination country as US and PHP memory usage less than 1 million</full_desc>

4. <request>agent:Mozilla* AND response:200</request>
<ppl>source=opensearch_dashboards_sample_data_logs | where agent LIKE 'Mozilla%' AND response = '200'</ppl>
<python>[doc for doc in documents if str(doc.get('agent')).startswith('Mozilla') and str(doc.get('response')) == '200']</python>
<full_desc>Show me all logs with user agent starting with 'Mozilla' and response code 200</full_desc>

5. <request>memory>0.5 AND timestamp>[now-1d]</request>
<ppl>source=opensearch_dashboards_sample_data_logs | where memory > 0.5 AND timestamp > now() - 1d</ppl>
<python>[doc for doc in documents if doc.get('memory') is not None and float(doc.get('memory')) > 0.5 and doc.get('timestamp') is not None and doc.get('timestamp') > (datetime.now() - timedelta(days=1))]</python>
<full_desc>Show me all logs with memory usage greater than 0.5 and timestamp within the last 24 hours</full_desc>